1 - default 2500 100 8m locust, load 2cores, cost calculation - some failures seen, around 10 reqs
2 - v1 with .25 net weight, 2500 100 8m locust, load 2cores, cost calculation, errors seen
3 - v1 with .5 net weight, 2500 100 8m locust, load 2cores, cost calculation
4 - v1 with .75 net weight, 2500 100 8m locust, load 2cores, cost calculation
5 - v1 with 1 net weight, 2500 100 8m locust, load 2cores, cost calculation

------ 

with cost added 

6 - v2, .33 .33 .33, load 2 cores
7 - v2, .25, .25, .5 load 2 cores
8 - v2, .4, .4. .2 load 2 cores


------
Week 13

9 - v1 with 0 net weight, 1 cpu weight, 2500 100 8m locust, load 2 cores, cost calculation
10 - v1 with .125 net weight, 2500 100 8m locust, load 2 cores, cost calculation
11 - v1 with .375 net weight, 2500 100 8m locust, load 2 cores 

12 - v1 with 0 net weight, 500 100 3m locust, load 2 cores
13 - v1 with 0.25 net weight, 500 100 3m locust, load 2 cores
14 - v1 with 0.5 net weight, 500 100 3m locust, load 2 cores
15 - v1 with 0.75 net weight, 500 100 3m locust, load 2 cores
16 - v1 with 1 net weight, 500 100 3m locust, load 2 cores
17 - v1 with .125 net weight, 500 100 3m locust, load 2 cores
18 - v1 with .375 net weight, 500 100 3m locust, load 2 cores

---

19 - v1 with 0 net weight, 50 100 3m locust, load 2cores
20 - v1 with 0.125 net weight, 50 100 3m locust, load 2cores
21 - v1 with 0.25 net weight, 50 100 3m locust, load 2cores
22 - v1 with 0.375 net weight, 50 100 3m locust, load 2cores
23 - v1 with 0.5 net weight, 50 100 3m locust, load 2cores
24 - v1 with 0.75 net weight, 50 100 3m locust, load 2cores
25 - v1 with 1 net weight, 50 100 3m locust, load 2cores

---

26 - v2 with 0 cost weight, 2500 100 3m locust, load 2 cores
27 - v2 with .125 cost weight, "
28 - v2 with 0.25 cost weight, 2500 100 3m locust, load 2 cores
29 - v2 with .375 cost weight, "
30 - v2 with 0.5 cost weight, 2500 100 3m locust, load 2 cores
31 - v2 with 0.75 cost weight, 2500 100 3m locust, load 2 cores
32 - v2 with 1 cost weight, 2500 100 3m locust, load 2 cores
33 - v2 with .05 cost weight, 2500 100 3m locust, load 2 cores --- does cost reduce without effecting vm count

---

34 to 40 - v2 with 0, 0.125, .25, .375, .5, .75, 1 - 500 100 3m, load 2 cores

41 to 47 - v2 with 0, .125, .25, .375, .5, .75, 1 - 50 100 3m, load 2 cores

48 to 52 - v2 with 500 100 3m, load 2 cores, jobs = [(48, 0.0, 0.75, 0.25), (49, 0.09375, 0.65625, 0.25), (50, 0.1875, 0.5625, 0.25), (51, 0.28125, 0.46875, 0.25), (52, 0.375, 0.375, 0.25)] 
53 to 57 - v2 with 2500 100 3m, load 2 cores, jobs = [(53, 0.0, 0.75, 0.25), (54, 0.09375, 0.65625, 0.25), (55, 0.1875, 0.5625, 0.25), (56, 0.28125, 0.46875, 0.25), (57, 0.375, 0.375, 0.25)]
do above one again

---
14 Week
58, 59, 60 - bin packing with (50, 1000, 2000) 100 3m, load cpu 
61 to 63 - default scheduler with (50, 1000, 2000) 100 3m, load cpu 
64 to 66 - netMarks 1 net weight with (50, 1000, 2000) 100 3m, load cpu 

67 to 70 - [(67, 0.0, 1.0, 0.0), (68, 0.125, 0.875, 0.0), (69, 0.25, 0.75, 0.0), (70, 0.375, 0.625, 0.0)] 1000 3m, load cpu
71 to 74 - [(71, 0.0, 0.875, 0.125), (72, 0.109375, 0.765625, 0.125), (73, 0.21875, 0.65625, 0.125), (74, 0.328125, 0.546875, 0.125)] 1000 3m, load cpu
75 to 78 - [(75, 0.0, 0.75, 0.25), (76, 0.09375, 0.65625, 0.25), (77, 0.1875, 0.5625, 0.25), (78, 0.28125, 0.46875, 0.25)] 1000 3m, load cpu
79 to 82 - [(79, 0.0, 0.625, 0.375), (80, 0.078125, 0.546875, 0.375), (81, 0.15625, 0.46875, 0.375), (82, 0.234375, 0.390625, 0.375)], 1000 3m, load cpu
83 - 
84


---
Week 15 - paper writing start
87 - 95 - v1 with 100 users, load 2 cores, 3min [(87, 0, 1.0, 0), (88, 0.125, 0.875, 0), (89, 0.25, 0.75, 0), (90, 0.375, 0.625, 0), (91, 0.5, 0.5, 0), (92, 0.625, 0.375, 0), (93, 0.75, 0.25, 0), (94, 0.875, 0.125, 0), (95, 1.0, 0.0, 0)]
96 - 104 - v1 with 200 users, load 2 cores, 3min [(96, 0, 1.0, 0), (97, 0.125, 0.875, 0), (98, 0.25, 0.75, 0), (99, 0.375, 0.625, 0), (100, 0.5, 0.5, 0), (101, 0.625, 0.375, 0), (102, 0.75, 0.25, 0), (103, 0.875, 0.125, 0), (104, 1.0, 0.0, 0)]
105 - 113 - v1 with 300 users, load 2 cores [(105, 0, 1.0, 0), (106, 0.125, 0.875, 0), (107, 0.25, 0.75, 0), (108, 0.375, 0.625, 0), (109, 0.5, 0.5, 0), (110, 0.625, 0.375, 0), (111, 0.75, 0.25, 0), (112, 0.875, 0.125, 0), (113, 1.0, 0.0, 0)]

115 - 117 - default with 100, 200, 300 users, load 2 cores, 3 min

-- Leaving 100 users criteria, focusing on 1000

[(118, 0.5, 0.5, 0), (119, 0.625, 0.375, 0), (120, 0.75, 0.25, 0), (121, 0.875, 0.125, 0), (122, 1, 0.0, 0), (123, 0.4375, 0.4375, 0.125), (124, 0.546875, 0.328125, 0.125), (125, 0.65625, 0.21875, 0.125), (126, 0.765625, 0.109375, 0.125), (127, 0.875, 0.0, 0.125), (128, 0.375, 0.375, 0.25), (129, 0.46875, 0.28125, 0.25), (130, 0.5625, 0.1875, 0.25), (131, 0.65625, 0.09375, 0.25), (132, 0.75, 0.0, 0.25), (133, 0.3125, 0.3125, 0.375), (134, 0.390625, 0.234375, 0.375), (135, 0.46875, 0.15625, 0.375), (136, 0.546875, 0.078125, 0.375), (137, 0.625, 0.0, 0.375)]
140, 141 - 1000 user, 3min, load, tryout again [(140, 0, 0.875, 0.125), (141, 0, 1, 0)]
142, 143 - 1000 user, 3min, !!!no load, tryout again [(142, 0, 0.875, 0.125), (143, 0, 1, 0)]

---
Final Experiments
files = [200, 201, 202, 203, 204, 205]
user = [50, 100, 500, 1000, 1500, 2000]